C , C++ , Java 

Array 

function 

structure

------------------------------------------------------------------------------


array :- 

    int a;
    int b; 
    int a,b,c,d,e,f,g; 

    int a[10];

    a[0]; index -> start : 0 , end  : SIZE-1 

    index --> subScript --> 

----------------------------------------------------------------------------------

5 array 

input 

display 


5,15,3,19,7

5,15,3,19,7

Sort
ASC 
3 5 7 15 19 

bubble sort -> 

-----------------------------------------------------------------------------------


Best Case   :   OMEGA   -> Lower Bound   
Worst Case  :   BIG O   -> Upper Bound
Avg Case    :   THETA   -> Ti  / avg 

-----------------------------------------------------------------------------------



                            DS 

        Linear DS                       Non Linear DS 
        Array                           Tree
        Stack                           Graph 
        Queue
        LinkedList 

        Sorting : bubble , selection , insertion , merge , quick  
        Searching : Linear , binary 


-----------------------------------------------------------------------------------

STACK => LiFo => Last In First Out => 

Task Manager -> 

Transaction -> History -> Browser -> Call Log -> 

WhatsApp -> 
Gallery  -> 



Add : PUSH 
display
Remove : POP 

-----------------------------------------------------------------------------------

enter string 
()()()
valid 

enter string 
()[()()]
valid 


enter string 
()()(){ 
Invalid 


enter string 
[(])()()
Invalid 



string scan -> char -> push -> 
logic -> valid , Invalid 




stack manage -> 


add -> push 
remove -> pop 


what instruction we need to write in push ? 
top++ 


how to check stack is full ? orverflow ? 
top == SIZE-1 --> full | overflow 


how to check stack is empty? 
top=-1 


stack -> LiFo => 
-----------------------------------------------------------------

FiFo ==> First In First Out

Queue => FIFO 

insert -> enQueue()
remove -> deQueue()
display()

server request  -> action 
call center -> 
printer -> 
-----------------------------------------------------------------

array of structure -> 3 marksheet 
-----------------------------------------------------------------

SMA -> implicit -> 

int a; //  4 byte GCC , TC 2 byte 


int x[10] ; // 10*4 => 40 byte 

// 3 elements -> -7
// 22 elements -> +12 

DMA -> explicit  ->

calloc() -- allocation 
malloc() -- allocation 
free()   -- release 
realloc() -- resizing 


malloc ->  single size block 
calloc ->  n number of block with same size 

malloc(100); // single block of 100 byte 
calloc(25,4); // 25 block of 4 byte  


a   -> malloc 
a[] -> calloc 


pointer - 
----------------------------------------------------------

Linked List - 
            1) function 
            2) structure 
            3) pointer 
            4) DMA 


List -> collection of items 

dynamic list ->
            1) add : when you want to add item , you will allocate 
            2) remove : when you dont want  , release memory 

self referential structure 



            data ---> node 